#!/usr/bin/env python3
"""
Test All Metals Fund Position Data
ÂÖ®ÈáëÂ±û„ÅÆ„Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥„Éá„Éº„Çø„ÉÜ„Çπ„Éà

Author: Claude Code  
Created: 2025-06-26
"""

import eikon as ek
import pandas as pd
import json
import time

def test_all_metals_fund_positions():
    """ÂÖ®ÈáëÂ±û„ÅÆ„Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥„Éá„Éº„Çø„ÉÜ„Çπ„Éà"""
    
    # Ë®≠ÂÆöË™≠„ÅøËæº„Åø
    with open("config.json", 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    # EIKON APIÂàùÊúüÂåñ
    ek.set_app_key(config["eikon_api_key"])
    
    print("üìä ÂÖ®LMEÈáëÂ±û„Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà")
    print("=" * 60)
    print("Êó¢Áü•„Éë„Çø„Éº„É≥: LME-INFUS-CA (Short), LME-INFUL-CA (Long)")
    print("=" * 60)
    
    # Êé®ÂÆö„Åï„Çå„ÇãÈáëÂ±ûÂà•„Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥RIC„Éë„Çø„Éº„É≥
    metals = ["CA", "AL", "ZN", "PB", "NI", "SN"]  # Copper, Aluminum, Zinc, Lead, Nickel, Tin
    metal_names = ["Copper", "Aluminium", "Zinc", "Lead", "Nickel", "Tin"]
    
    fund_position_data = {}
    
    print("\n1. ÂÖ®ÈáëÂ±û„Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥Êé¢Á¥¢:")
    print("-" * 50)
    
    for i, (metal_code, metal_name) in enumerate(zip(metals, metal_names)):
        print(f"\nüîç {metal_name} ({metal_code}):")
        
        # Êé®ÂÆöRIC„Éë„Çø„Éº„É≥
        long_ric = f"LME-INFUL-{metal_code}"
        short_ric = f"LME-INFUS-{metal_code}"
        
        metal_data = {}
        
        # „É≠„É≥„Ç∞„Éù„Ç∏„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà
        try:
            long_data, long_err = ek.get_data(long_ric, ['CF_LAST', 'CF_NAME', 'CF_DATE'])
            if long_data is not None and not long_data.empty:
                row = long_data.iloc[0]
                long_value = row.get('CF_LAST')
                long_name = row.get('CF_NAME', 'N/A')
                long_date = row.get('CF_DATE', 'N/A')
                
                if pd.notna(long_value) and long_value is not None:
                    metal_data['long'] = {
                        'value': float(long_value),
                        'name': long_name,
                        'date': str(long_date),
                        'ric': long_ric
                    }
                    print(f"  ‚úÖ „É≠„É≥„Ç∞: {long_value:,.2f} ({long_name})")
                else:
                    print(f"  ‚ùå „É≠„É≥„Ç∞: „Éá„Éº„ÇøÁ©∫")
            else:
                print(f"  ‚ùå „É≠„É≥„Ç∞: „Ç¢„ÇØ„Çª„ÇπÂ§±Êïó ({long_ric})")
                
            if long_err:
                print(f"    Ë≠¶Âëä: {long_err}")
                
        except Exception as e:
            print(f"  ‚ùå „É≠„É≥„Ç∞: „Ç®„É©„Éº - {e}")
        
        time.sleep(0.3)
        
        # „Ç∑„Éß„Éº„Éà„Éù„Ç∏„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà
        try:
            short_data, short_err = ek.get_data(short_ric, ['CF_LAST', 'CF_NAME', 'CF_DATE'])
            if short_data is not None and not short_data.empty:
                row = short_data.iloc[0]
                short_value = row.get('CF_LAST')
                short_name = row.get('CF_NAME', 'N/A')
                short_date = row.get('CF_DATE', 'N/A')
                
                if pd.notna(short_value) and short_value is not None:
                    metal_data['short'] = {
                        'value': float(short_value),
                        'name': short_name,
                        'date': str(short_date),
                        'ric': short_ric
                    }
                    print(f"  ‚úÖ „Ç∑„Éß„Éº„Éà: {short_value:,.2f} ({short_name})")
                else:
                    print(f"  ‚ùå „Ç∑„Éß„Éº„Éà: „Éá„Éº„ÇøÁ©∫")
            else:
                print(f"  ‚ùå „Ç∑„Éß„Éº„Éà: „Ç¢„ÇØ„Çª„ÇπÂ§±Êïó ({short_ric})")
                
            if short_err:
                print(f"    Ë≠¶Âëä: {short_err}")
                
        except Exception as e:
            print(f"  ‚ùå „Ç∑„Éß„Éº„Éà: „Ç®„É©„Éº - {e}")
        
        time.sleep(0.3)
        
        # „Éç„ÉÉ„Éà„Éù„Ç∏„Ç∑„Éß„É≥Ë®àÁÆó
        if 'long' in metal_data and 'short' in metal_data:
            long_val = metal_data['long']['value']
            short_val = metal_data['short']['value']
            net_position = long_val - short_val
            
            metal_data['net_position'] = net_position
            metal_data['long_ratio'] = (long_val / (long_val + short_val)) * 100
            metal_data['sentiment'] = _get_sentiment(long_val / short_val if short_val > 0 else float('inf'))
            
            print(f"  üìä „Éç„ÉÉ„Éà: {net_position:,.2f} ({metal_data['sentiment']})")
            
        if metal_data:
            fund_position_data[metal_name.lower()] = metal_data
    
    # 2. ÁµêÊûú„Çµ„Éû„É™„Éº
    print(f"\n\n2. „Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥ÂèñÂæóÁµêÊûú„Çµ„Éû„É™„Éº:")
    print("=" * 60)
    
    for metal, data in fund_position_data.items():
        print(f"\n{metal.upper()}:")
        if 'long' in data and 'short' in data:
            print(f"  „É≠„É≥„Ç∞: {data['long']['value']:,.2f}")
            print(f"  „Ç∑„Éß„Éº„Éà: {data['short']['value']:,.2f}")
            print(f"  „Éç„ÉÉ„Éà: {data['net_position']:,.2f}")
            print(f"  „É≠„É≥„Ç∞ÊØîÁéá: {data['long_ratio']:.1f}%")
            print(f"  „Çª„É≥„ÉÅ„É°„É≥„Éà: {data['sentiment']}")
            
            # Â∏ÇÂ†¥Âê´ÊÑè
            net_pos = data['net_position']
            if abs(net_pos) > 10000:
                if net_pos > 0:
                    implication = "Â§ßË¶èÊ®°„Éç„ÉÉ„Éà„É≠„É≥„Ç∞ ‚Üí Âº∑„ÅÑ‰∏äÊòáÂúßÂäõ"
                else:
                    implication = "Â§ßË¶èÊ®°„Éç„ÉÉ„Éà„Ç∑„Éß„Éº„Éà ‚Üí Âº∑„ÅÑ‰∏ãËêΩÂúßÂäõ"
            elif abs(net_pos) > 5000:
                if net_pos > 0:
                    implication = "‰∏≠Ë¶èÊ®°„Éç„ÉÉ„Éà„É≠„É≥„Ç∞ ‚Üí ‰∏äÊòáÂÇæÂêë"
                else:
                    implication = "‰∏≠Ë¶èÊ®°„Éç„ÉÉ„Éà„Ç∑„Éß„Éº„Éà ‚Üí ‰∏ãËêΩÂÇæÂêë"
            else:
                implication = "‰∏≠Á´ãÁöÑ„Éù„Ç∏„Ç∑„Éß„É≥ ‚Üí „Éà„É¨„É≥„Éâ„É¨„Çπ"
            
            print(f"  Â∏ÇÂ†¥Âê´ÊÑè: {implication}")
        else:
            available = []
            if 'long' in data:
                available.append("„É≠„É≥„Ç∞")
            if 'short' in data:
                available.append("„Ç∑„Éß„Éº„Éà")
            print(f"  Âà©Áî®ÂèØËÉΩ: {', '.join(available) if available else '„Å™„Åó'}")
    
    # 3. Daily ReportÁµ±ÂêàÁî®Ë®≠ÂÆöÁîüÊàê
    print(f"\n\n3. Daily ReportÁµ±ÂêàÁî®Ë®≠ÂÆö:")
    print("=" * 60)
    
    if fund_position_data:
        # config.json„Å´ËøΩÂä†„Åô„ÇãË®≠ÂÆö„ÇíÁîüÊàê
        fund_position_config = {}
        
        for metal, data in fund_position_data.items():
            if 'long' in data and 'short' in data:
                fund_position_config[metal] = {
                    "long_ric": data['long']['ric'],
                    "short_ric": data['short']['ric']
                }
        
        if fund_position_config:
            print("config.json„Å´ËøΩÂä†„Åô„ÇãË®≠ÂÆö:")
            print('"fund_position_rics": {')
            for metal, rics in fund_position_config.items():
                print(f'  "{metal}": {{')
                print(f'    "long_ric": "{rics["long_ric"]}",')
                print(f'    "short_ric": "{rics["short_ric"]}"')
                print(f'  }},')
            print('}')
            
            # Daily ReportÁî®„Çµ„É≥„Éó„É´Âá∫Âäõ
            print(f"\nDaily ReportÂá∫Âäõ„Çµ„É≥„Éó„É´:")
            print("=" * 40)
            print("„ÄêÊäïË≥á„Éï„Ç°„É≥„Éâ„Éù„Ç∏„Ç∑„Éß„É≥ÔºàLMEÔºâ„Äë")
            
            for metal, data in fund_position_data.items():
                if 'long' in data and 'short' in data:
                    print(f"  {metal.capitalize()}:")
                    print(f"    „É≠„É≥„Ç∞: {data['long']['value']:,.0f} Â•ëÁ¥Ñ")
                    print(f"    „Ç∑„Éß„Éº„Éà: {data['short']['value']:,.0f} Â•ëÁ¥Ñ") 
                    print(f"    „Éç„ÉÉ„Éà: {data['net_position']:,.0f} Â•ëÁ¥Ñ ({data['sentiment']})")
                    
                    # ÂâçÈÄ±ÊØîËºÉÔºà„Çµ„É≥„Éó„É´Ôºâ
                    print(f"    Êõ¥Êñ∞: {data['long']['date']}")
                    print()
    
    return fund_position_data

def _get_sentiment(long_short_ratio):
    """„É≠„É≥„Ç∞/„Ç∑„Éß„Éº„ÉàÊØîÁéá„Åã„ÇâÂ∏ÇÂ†¥„Çª„É≥„ÉÅ„É°„É≥„Éà„ÇíÂà§ÂÆö"""
    if long_short_ratio > 2.5:
        return "Âº∑Ê∞ó„Éê„Ç§„Ç¢„Çπ"
    elif long_short_ratio > 1.5:
        return "„ÇÑ„ÇÑÂº∑Ê∞ó"
    elif long_short_ratio > 0.8:
        return "‰∏≠Á´ã"
    elif long_short_ratio > 0.5:
        return "„ÇÑ„ÇÑÂº±Ê∞ó"
    else:
        return "Âº±Ê∞ó„Éê„Ç§„Ç¢„Çπ"

if __name__ == "__main__":
    test_all_metals_fund_positions()